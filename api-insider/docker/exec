#!/bin/bash


NAME="base"

FIRST_ARG="$1"
shift
ARGS="$@"

docker_down () {
    COMPOSE_HTTP_TIMEOUT=512 docker compose down --volumes
}

docker_up () {
    COMPOSE_HTTP_TIMEOUT=512 docker compose up -d
}

help () {
    echo "build             :  build docker instance"
    echo "up                :  up docker instance"
    echo "down              :  down docker inscance"
    echo "restart           :  down then up docker instance"
    echo "bserver           :  run phoenix dev server"
    echo "btest             :  run test"
    echo "fserver           :  run webpack dev server"
    echo "yarn              :  run yarn"
    echo "api <args>        :  execute random command on api service, ex: ./exec api ls"
    echo "api-upgrade       :  upgrade api dependencies",
    echo "api-post-upgrade  :  check outdated api dependencies"
}

if [ "$FIRST_ARG" == "-h" ]; then
    help
    exit 0
fi

if [ "$FIRST_ARG" == "api" ] || [ "$FIRST_ARG" == "db" ] || [ "$FIRST_ARG" == "web" ]; then
    docker compose exec "$NAME"_"$FIRST_ARG" $ARGS
elif [ "$FIRST_ARG" == "yarn" ]; then
    docker compose exec "$NAME"_web yarn $ARGS
elif [ "$FIRST_ARG" == "fserver" ]; then
    docker compose exec "$NAME"_web yarn dev
elif [ "$FIRST_ARG" == "generate" ]; then
    docker compose exec "$NAME"_api npm run generate
elif [ "$FIRST_ARG" == "migrate" ]; then
    docker compose exec "$NAME"_api npm run migrate
elif [ "$FIRST_ARG" == "fetch-router" ]; then
    docker compose exec "$NAME"_api npm run fetch-router
elif [ "$FIRST_ARG" == "seed" ]; then
    docker compose exec "$NAME"_api npm run seed
elif [ "$FIRST_ARG" == "bserver" ]; then
    docker compose exec "$NAME"_api yarn dev runserver 0.0.0.0:4000
elif [ "$FIRST_ARG" == "up" ]; then
    docker_up
elif [ "$FIRST_ARG" == "down" ]; then
    docker_down
elif [ "$FIRST_ARG" == "restart" ]; then
    docker_down
    docker_up
elif [ "$FIRST_ARG" == "build" ]; then
    docker compose build --no-cache
elif [ "$FIRST_ARG" == "pg_dump" ]; then
    docker compose exec "$NAME"_db pg_dump $ARGS
    # ./exec pg_dump -U username db_name > db.sql
elif [ "$FIRST_ARG" == "clean-db" ]; then
    docker_down
    rm -rf dbdata
    mkdir dbdata
    docker_up
    docker compose exec "$NAME"_api npm run generate
    docker compose exec "$NAME"_api npm run migrate
    docker compose exec "$NAME"_api npm run fetch-router
    docker compose exec "$NAME"_api npm run seed
elif [ "$FIRST_ARG" == "btest" ]; then
    if [[ $1 ]]; then
        docker compose exec "$NAME"_api npm run test $1
    else
        docker compose exec "$NAME"_api npm run test
    fi
else
    echo "Invalid argument, please use following arguments:"
    echo "-------------------------------------------------"
    help
fi
